plugins {
    id 'io.sentry.android.gradle' version '4.6.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: "org.jlleitschuh.gradle.ktlint"
apply plugin: "com.hyperdevs.poeditor"
apply plugin: 'dagger.hilt.android.plugin'
apply from: rootProject.file('dependencies.gradle')

poEditor {
    apiToken = "3db4ceebbda2d46447684ab6b5112b47"
    projectId = 559879
    defaultLang = "en"
}

task fixHtmlConfiguration() {
    group 'translations'
    def lang = ["", "-nl"]
    for (item in lang) {
        def proj = file("$projectDir/src/main/res/values${item}/strings.xml")
        def text = proj.getText("UTF-8")
        text = text.replace('<u>', '&lt;u&gt;').replace('</u>', '&lt;/u&gt;').replace('<b>', '&lt;b&gt;').replace('</b>', '&lt;/b&gt;')
        proj.write(text, "UTF-8")
    }

}

static def generateVersionCode() {
    def result = "git rev-list --all --count".execute().text.trim() //unix
    if (result.empty) result = "PowerShell -Command git rev-list --all --count".execute().text.trim()
    //windows
    if (result.empty) throw new RuntimeException("Could not generate versioncode on this platform? Cmd output: ${result.text}")
    return result.toInteger() % 255
}


repositories {
    mavenCentral()
}
def majorVersion = 4
def minorVersion = 11
def patchVersion = 16
android {
    signingConfigs {
        receiver_production {
            // Load keystore
            def keystorePropertiesFile = rootProject.file("receiver/keystore.properties");
            print(keystorePropertiesFile.toString())

            def keystoreProperties = new Properties()
            if (keystorePropertiesFile.exists()) {
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
            }

            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }

        nxt_production {
            // Load keystore
            def keystorePropertiesFile = rootProject.file("nxt/keystore.properties");
            print(keystorePropertiesFile.toString())

            def keystoreProperties = new Properties()
            if (keystorePropertiesFile.exists()) {
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
            }
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    compileSdkVersion rootProject.compileSdkVersion

    defaultConfig {
        applicationId "com.picasse.receiver"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.minSdkVersion * 10000 + majorVersion * 1000 + minorVersion * 100 + generateVersionCode() * 10
        versionName "${rootProject.minSdkVersion}.${majorVersion}.${minorVersion}.${generateVersionCode()}"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
        signingConfig signingConfigs.receiver_production

        buildConfigField("String", "shared_key", shared_key)
        buildConfigField("String", "algorithm", algorithm)
        buildConfigField("String", "charset_name", charset_name)
        buildConfigField("String", 'API_ID', api_id)
        buildConfigField("String", 'APP_KEY', app_key)

        def endpointPropertiesFile = rootProject.file("endpoint.properties")
        def endpointProperties = new Properties()
        endpointProperties.load(new FileInputStream(endpointPropertiesFile))

        buildConfigField("String", "register", endpointProperties['register'])
        buildConfigField("String", "verify", endpointProperties['verify'])
        buildConfigField("String", "pushToken", endpointProperties['pushToken'])
        buildConfigField("String", "pushAppVersion", endpointProperties['pushAppVersion'])
        buildConfigField("String", "fetchAlerts", endpointProperties['fetchAlerts'])
        buildConfigField("String", "alertReply", endpointProperties['alertReply'])
        buildConfigField("String", "getGeoFence", endpointProperties['getGeoFence'])
        buildConfigField("String", "getPresentGeoFence", endpointProperties['getPresentGeoFence'])
        buildConfigField("String", "reportLocation", endpointProperties['reportLocation'])
        buildConfigField("String", "reportLocations", endpointProperties['reportLocations'])
        buildConfigField("String", "pushOfflineLocation", endpointProperties['pushOfflineLocation'])
        buildConfigField("String", "pushPresenceLocation", endpointProperties['pushPresenceLocation'])
        buildConfigField("String", "pushDebug", endpointProperties['pushDebug'])
        buildConfigField("String", "pushInfo", endpointProperties['pushInfo'])
        buildConfigField("String", "ping", endpointProperties['ping'])
        buildConfigField("String", "pushSettings", endpointProperties['pushSettings'])
        buildConfigField("String", "deviceHealth", endpointProperties['deviceHealth'])
        buildConfigField("String", "availableStatus", endpointProperties['availableStatus'])
        buildConfigField("String", "availableStatusSchedule", endpointProperties['availableStatusSchedule'])
        buildConfigField("String", "checkStatus", endpointProperties['checkStatus'])
        buildConfigField("String", "feedback", endpointProperties['feedback'])
        buildConfigField("String", "fetchAppUpdate", endpointProperties['fetchAppUpdate'])
        buildConfigField("String", "fetchAppUpdateASYNC", endpointProperties['fetchAppUpdateASYNC'])
        buildConfigField("String", "clientInformation", endpointProperties['clientInformation'])
        vectorDrawables.useSupportLibrary = true

    }
    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.nxt_production

        }

        debug {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }


        applicationVariants.all { variant ->
            variant.outputs.all { output ->
                def project = "Picasse"
                def SEP = "-"
                def buildType = variant.buildType.name
                def flavour = variant.flavorName
                def name = variant.versionName
                def date = new Date();
                def formattedDate = date.format('dd-MM-yy')

                def newApkName = project + SEP + flavour + SEP + buildType + SEP + "(" + name + ")" + formattedDate + ".apk"

                outputFileName = new File(newApkName)
            }
        }


    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    flavorDimensions "app", "env"

    productFlavors {

        def serverPropertiesFile = rootProject.file("server.properties")
        def serverProperties = new Properties()
        serverProperties.load(new FileInputStream(serverPropertiesFile))


        receiver {
            dimension "app"
            versionNameSuffix ""
            manifestPlaceholders = [appLabel: "Picasse Receiver"]
            signingConfig signingConfigs.receiver_production
        }

        nxt {
            dimension "app"
            applicationIdSuffix ".nxt"
            versionNameSuffix ""
            manifestPlaceholders = [appLabel: "Picasse"]
            signingConfig signingConfigs.nxt_production
        }

        production {
            buildConfigField "String", 'BASE_URL', serverProperties['ProductionBaseUrl']
            buildConfigField "String", 'BASE_URL_PLANNER', serverProperties['ProductionBaseUrlPlanner']
            buildConfigField "String", 'BASE_URL_TOUCHPOINT', serverProperties['ProductionBaseUrlTouchPoint']
            buildConfigField "String", 'BASE_URL_SENDER', serverProperties['ProductionBaseUrlSender']
            dimension "env"
        }

        staging {
            buildConfigField "String", 'BASE_URL_PLANNER', serverProperties['StagingBaseUrlPlanner']
            buildConfigField "String", 'BASE_URL', serverProperties['StagingBaseUrl']
            buildConfigField "String", 'BASE_URL_TOUCHPOINT', serverProperties['StagingBaseUrlTouchPoint']
            buildConfigField "String", 'BASE_URL_SENDER', serverProperties['StagingBaseUrlSender']
            dimension "env"
        }

        /*  proxy {
              buildConfigField "String", 'BASE_URL', serverProperties['ProxyBaseUrl']
              buildConfigField "String", 'BASE_URL_PLANNER', serverProperties['ProductionBaseUrlPlanner']
              buildConfigField "String", 'BASE_URL_TOUCHPOINT', serverProperties['ProductionBaseUrlTouchPoint']
              buildConfigField "String", 'BASE_URL_SENDER', serverProperties['ProductionBaseUrlSender']
              dimension "env"
          }
          failover {
              buildConfigField "String", 'BASE_URL', serverProperties['FailOverBaseUrl']
              buildConfigField "String", 'BASE_URL_PLANNER', serverProperties['ProductionBaseUrlPlanner']
              buildConfigField "String", 'BASE_URL_TOUCHPOINT', serverProperties['ProductionBaseUrlTouchPoint']
              buildConfigField "String", 'BASE_URL_SENDER', serverProperties['ProductionBaseUrlSender']
              dimension "env"
          }*/

    }
// work-runtime-ktx 2.1.0 and above now requires Java 8
    kotlinOptions {
        jvmTarget = "1.8"
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            animationsDisabled = true
        }
    }
    namespace 'com.picasse.receiver'

    buildFeatures {
        viewBinding true
        compose true
    }


    ktlint {
        version = "1.0.0"
        verbose = true
        android = true
        reporters {
            reporter "html"
        }

        android {
            filter {
                include("**/*.kt")
                exclude("**/build**")
            }
        }
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.4.7'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }


}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    // sip service
    implementation project(':sipservice')
    implementation project(":app-permission")

    //android design
    implementation "androidx.appcompat:appcompat:$appCompat"
    implementation "androidx.vectordrawable:vectordrawable:$vectorDrawble"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayout"
    implementation "com.google.android.material:material:$material"
    implementation "androidx.navigation:navigation-fragment:$navigation"
    implementation "androidx.navigation:navigation-ui:$navigation"
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation"

    // AndroidX Test - Instrumented testing
    implementation "androidx.test.espresso:espresso-idling-resource:$expressoVersion"

    // Location Services
    implementation "com.google.android.gms:play-services-location:$playServicesVersion"

    // UI Libraries
    implementation "com.github.lisawray.groupie:groupie:$groupieVersion"
    implementation "com.github.lisawray.groupie:groupie-kotlin-android-extensions:$groupieVersion"
    implementation "com.github.GrenderG:Toasty:$toastyVersion"
    implementation "com.rengwuxian.materialedittext:library:$materialEditTextVersion"

    // Util Libraries
    implementation "com.github.Redman1037:Android-Permissions:$androidPermissionsVersion"
//    implementation "io.reactivex.rxjava2:rxjava:$rxJavaVersion"
//    implementation "io.reactivex.rxjava2:rxandroid:$rxAndroidVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.7.3"

    // work-manager library
    implementation "androidx.work:work-runtime:$work_version"
    implementation "androidx.work:work-runtime-ktx:$work_version"

    // Server Libraries
    implementation("com.squareup.retrofit2:retrofit:$retrofitVersion") {
        exclude module: 'okhttp'
    }
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpInterceptorVersion"
    implementation "com.google.firebase:firebase-messaging:$firebaseMessagingVersion"

    // Room and Compose Components
    implementation "androidx.room:room-runtime:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"
    implementation "androidx.lifecycle:lifecycle-runtime-compose:2.6.2"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifeCycleRuntimeVersion"
    implementation "androidx.activity:activity-compose:$activityComposeVersion"
    implementation platform("androidx.compose:compose-bom:$composeVersion")
    implementation "androidx.compose.ui:ui"
    implementation "androidx.compose.ui:ui-graphics"
    implementation "androidx.compose.ui:ui-tooling-preview"
    implementation "androidx.compose.material3:material3"
    implementation "androidx.compose.material:material"
    implementation "androidx.paging:paging-runtime:3.2.0-alpha06"
    implementation 'androidx.paging:paging-compose:1.0.0-alpha20'

    debugImplementation "androidx.compose.ui:ui-tooling"
    debugImplementation "androidx.compose.ui:ui-test-manifest"

    kapt "androidx.room:room-compiler:$roomVersion"
    kapt "com.google.dagger:hilt-compiler:$hiltVersion"

    // Lifecycle components
    implementation "androidx.lifecycle:lifecycle-extensions:$androidLifeTimeExtension"
    implementation "androidx.lifecycle:lifecycle-common-java8:$archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$archLifecycleVersion"
    implementation "androidx.core:core-ktx:$androidCoreKotlinKtx"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    // SMS reading
    implementation "com.google.android.gms:play-services-auth:$serviceAuth"

    // Debugging Tools
    implementation "io.github.g00fy2:versioncompare:$versioncompareVersion"
    implementation 'com.orhanobut:logger:2.2.0'
    implementation "com.google.firebase:firebase-crashlytics:$firebaseCrashlyticsVersion"
    implementation "com.google.firebase:firebase-analytics:$firebaseAnalyticsVersion"

    // Multi Dex and Local Broadcast Manager
    implementation "androidx.multidex:multidex:$multidexVersion"
    implementation "androidx.localbroadcastmanager:localbroadcastmanager:$localBroadcastManagerVersion"
    // Google core APIs

    implementation "com.google.android.play:core:$androidPlayCore"
    implementation "com.google.android.play:core-ktx:$androidPlayCoreKtx"
    implementation "androidx.fragment:fragment-ktx:$fragmentKtx"

    implementation "com.airbnb.android:lottie:$lottieVersion"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$swipeToRefresh"

    implementation "me.zhanghai.android.materialprogressbar:library:$progressDialog"
    implementation("androidx.room:room-rxjava2:$rxJava")
    implementation "com.google.dagger:hilt-android:$hiltVersion"
    implementation("androidx.hilt:hilt-navigation-compose:$hiltComposeVersion")

    implementation "com.google.accompanist:accompanist-permissions:0.30.1"
    implementation "com.google.guava:guava:31.0.1-android"
    implementation "androidx.hilt:hilt-work:1.0.0"
    kapt "androidx.hilt:hilt-compiler:1.0.0"
    annotationProcessor "androidx.hilt:hilt-compiler:1.0.0"

    var paging_version = "2.1.2"
    implementation("androidx.paging:paging-runtime:$paging_version")
    // For Kotlin use paging-runtime-ktx

    implementation 'io.shipbook:shipbooksdk:1.+'

    testImplementation "com.squareup.okhttp3:mockwebserver:$mockWebServer"
    testImplementation "io.mockk:mockk:$mockk"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutineTest"
    testImplementation "org.mockito:mockito-core:$mockito_version"
    testImplementation "org.mockito:mockito-inline:$mockito_version"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockitoKotlin"
    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.hamcrest:hamcrest-all:$hamcrestVersion"
    testImplementation "androidx.arch.core:core-testing:$archTestingVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "androidx.test:core-ktx:$androidXTestCoreVersion"
    testImplementation "androidx.test.ext:junit:$androidXTestExtKotlinRunnerVersion"
    testImplementation "app.cash.turbine:turbine:$turbine"

    androidTestImplementation "com.squareup.okhttp3:mockwebserver:$mockWebServer"
    androidTestImplementation "org.mockito:mockito-android:$mockito_version"
    androidTestImplementation "androidx.room:room-testing:$roomVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidXTestExtKotlinRunnerVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$expressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$expressoVersion"
    androidTestImplementation "androidx.test.ext:junit-ktx:$androidXTestExtKotlinRunnerVersion"
    androidTestImplementation "androidx.test:core-ktx:$androidXTestCoreVersion"
    androidTestImplementation "androidx.test:runner:$androidXTestCoreVersion"
    androidTestImplementation "androidx.test:rules:$androidXTestCoreVersion"
    androidTestImplementation "androidx.test:core:$core"
    androidTestImplementation platform("androidx.compose:compose-bom:$composeVersion")
    androidTestImplementation "androidx.compose.ui:ui-test-junit4"


}
// Allow references to generated code
kapt {
    correctErrorTypes true
}


sentry {
    org = "picasse-3h"
    projectName = "android"

    // this will upload your source code to Sentry to show it as part of the stack traces
    // disable if you don't want to expose your sources
    includeSourceContext = true
}
